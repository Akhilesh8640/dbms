-- Step 1: Create the Account and Earned_Interest tables
CREATE TABLE Account (
    Account_No NUMBER PRIMARY KEY,
    Cust_Name VARCHAR2(100),
    Balance NUMBER,
    NoOfYears NUMBER
);

CREATE TABLE Earned_Interest (
    Account_No NUMBER REFERENCES Account(Account_No),
    Interest_Amt NUMBER
);

-- Step 2: Insert sample data into the Account table
INSERT INTO Account (Account_No, Cust_Name, Balance, NoOfYears) VALUES (1001, 'John Doe', 60000, 5);
INSERT INTO Account (Account_No, Cust_Name, Balance, NoOfYears) VALUES (1002, 'Alice Smith', 45000, 3);
INSERT INTO Account (Account_No, Cust_Name, Balance, NoOfYears) VALUES (1003, 'Bob Johnson', 75000, 4);
COMMIT;

-- Step 3: Create the PL/SQL Procedure to calculate simple interest
CREATE OR REPLACE PROCEDURE calculate_interest (
    p_account_no IN NUMBER,
    p_interest_rate IN NUMBER
) IS
    v_balance NUMBER;
    v_interest_amt NUMBER;
    v_no_of_years NUMBER;
BEGIN
    -- Fetch Balance and NoOfYears for the given Account_No
    SELECT Balance, NoOfYears
    INTO v_balance, v_no_of_years
    FROM Account
    WHERE Account_No = p_account_no;

    -- Calculate Simple Interest: Interest = (Principal * Rate * Time) / 100
    v_interest_amt := (v_balance * p_interest_rate * v_no_of_years) / 100;

    -- Insert the calculated interest amount into Earned_Interest table
    INSERT INTO Earned_Interest (Account_No, Interest_Amt)
    VALUES (p_account_no, v_interest_amt);

    -- Commit the transaction
    COMMIT;

    -- Display all records from Earned_Interest table
    FOR rec IN (SELECT * FROM Earned_Interest) LOOP
        DBMS_OUTPUT.PUT_LINE('Account_No: ' || rec.Account_No || ', Interest_Amt: ' || rec.Interest_Amt);
    END LOOP;
END;
/

-- Step 4: Create the PL/SQL Function to get accounts with balance > 50,000
CREATE OR REPLACE FUNCTION get_high_balance_accounts
RETURN SYS_REFCURSOR IS
    result_cursor SYS_REFCURSOR;
BEGIN
    -- Open a cursor for accounts with balance greater than 50,000
    OPEN result_cursor FOR
        SELECT * FROM Account
        WHERE Balance > 50000;
    
    -- Return the cursor to the caller
    RETURN result_cursor;
END;
/

-- Step 5: Usage Example for Procedure and Function

-- Call the calculate_interest procedure (e.g., Account_No = 1001, Interest_Rate = 5)
BEGIN
    calculate_interest(1001, 5);
END;
/

-- Call the get_high_balance_accounts function and display results
DECLARE
    accounts_cursor SYS_REFCURSOR;
    v_account_no Account.Account_No%TYPE;
    v_cust_name Account.Cust_Name%TYPE;
    v_balance Account.Balance%TYPE;
    v_no_of_years Account.NoOfYears%TYPE;
BEGIN
    -- Get the cursor from the function
    accounts_cursor := get_high_balance_accounts;

    -- Fetch and display all records
    LOOP
        FETCH accounts_cursor INTO v_account_no, v_cust_name, v_balance, v_no_of_years;
        EXIT WHEN accounts_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Account_No: ' || v_account_no || ', Cust_Name: ' || v_cust_name || ', Balance: ' || v_balance || ', NoOfYears: ' || v_no_of_years);
    END LOOP;

    -- Close the cursor
    CLOSE accounts_cursor;
END;
/

