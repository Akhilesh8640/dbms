-- 1. Create the Employee table
CREATE TABLE Employee (
    emp_id         NUMBER PRIMARY KEY,  -- Employee ID
    emp_name       VARCHAR2(100),       -- Employee Name
    dept_id        NUMBER,              -- Department ID
    DoJ            DATE,                -- Date of Joining
    salary         NUMBER(10, 2),       -- Salary
    commission     NUMBER(5, 2),        -- Commission
    job_title      VARCHAR2(100)        -- Job Title
);

-- 2. Create the Salary_Increment table
CREATE TABLE Salary_Increment (
    emp_id         NUMBER PRIMARY KEY,  -- Employee ID
    new_salary     NUMBER(10, 2)        -- New Salary after Increment
);

-- 3. Insert sample data into Employee table
INSERT INTO Employee (emp_id, emp_name, dept_id, DoJ, salary, commission, job_title)
VALUES (115, 'John Doe', 1, TO_DATE('2010-05-15', 'YYYY-MM-DD'), 9500, 500, 'Developer');

INSERT INTO Employee (emp_id, emp_name, dept_id, DoJ, salary, commission, job_title)
VALUES (116, 'Alice Smith', 2, TO_DATE('2015-08-20', 'YYYY-MM-DD'), 12000, 600, 'Manager');

INSERT INTO Employee (emp_id, emp_name, dept_id, DoJ, salary, commission, job_title)
VALUES (117, 'Bob Johnson', 1, TO_DATE('2005-03-10', 'YYYY-MM-DD'), 15000, 700, 'Senior Developer');

-- 4. PL/SQL Unnamed Block to Increase Salary Based on Experience

DECLARE
    v_emp_id        NUMBER := 115;  -- Replace with the employee ID you want to test (e.g., 115)
    v_new_salary    NUMBER(10, 2);
    v_experience    NUMBER;         -- To store the years of experience
    v_salary        NUMBER(10, 2);  -- To store the current salary of the employee

    -- Define an exception for invalid emp_id
    emp_not_found    EXCEPTION;

BEGIN
    -- Fetch the current salary and years of experience
    SELECT salary, MONTHS_BETWEEN(SYSDATE, DoJ) / 12
    INTO v_salary, v_experience
    FROM Employee
    WHERE emp_id = v_emp_id;

    -- Check experience and calculate the new salary
    IF v_experience > 10 THEN
        v_new_salary := v_salary * 1.20;  -- Increase salary by 20%
    ELSIF v_experience > 5 THEN
        v_new_salary := v_salary * 1.10;  -- Increase salary by 10%
    ELSE
        v_new_salary := v_salary * 1.05;  -- Increase salary by 5%
    END IF;

    -- Insert the new salary into Salary_Increment table
    INSERT INTO Salary_Increment (emp_id, new_salary)
    VALUES (v_emp_id, v_new_salary);

    -- Commit the transaction
    COMMIT;

    -- Display the updated salary for the user
    DBMS_OUTPUT.PUT_LINE('Employee ' || v_emp_id || ' new salary is: ' || v_new_salary);

EXCEPTION
    -- Handle the exception if the employee ID does not exist
    WHEN emp_not_found THEN
        DBMS_OUTPUT.PUT_LINE('Error: Employee ID not found!');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/
