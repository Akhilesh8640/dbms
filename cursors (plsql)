-- 1. Creating the Products table
CREATE TABLE Products (
    Product_id INT PRIMARY KEY,
    Product_Name VARCHAR(255),
    Product_Type VARCHAR(100),
    Price DECIMAL(10, 2)
);

-- Inserting some sample data
INSERT INTO Products (Product_id, Product_Name, Product_Type, Price) VALUES (1, 'T-Shirt', 'Apparel', 1200);
INSERT INTO Products (Product_id, Product_Name, Product_Type, Price) VALUES (2, 'Jeans', 'Apparel', 3000);
INSERT INTO Products (Product_id, Product_Name, Product_Type, Price) VALUES (3, 'Laptop', 'Electronics', 7000);
INSERT INTO Products (Product_id, Product_Name, Product_Type, Price) VALUES (4, 'Shoes', 'Apparel', 4500);
INSERT INTO Products (Product_id, Product_Name, Product_Type, Price) VALUES (5, 'Smartphone', 'Electronics', 12000);

-- 2. Parameterized Cursor to Display Products in Given Price Range and Type 'Apparel'
DECLARE
    min_price DECIMAL(10, 2);
    max_price DECIMAL(10, 2);
    v_Product_id INT;
    v_Product_Name VARCHAR(255);
    v_Product_Type VARCHAR(100);
    v_Price DECIMAL(10, 2);

    CURSOR product_cursor IS
        SELECT Product_id, Product_Name, Product_Type, Price
        FROM Products
        WHERE Product_Type = 'Apparel' AND Price BETWEEN min_price AND max_price;
BEGIN
    -- Take user input for the price range (you can modify these as per your input method)
    min_price := 1000;  -- Example input value
    max_price := 5000;  -- Example input value

    OPEN product_cursor;
    LOOP
        FETCH product_cursor INTO v_Product_id, v_Product_Name, v_Product_Type, v_Price;
        EXIT WHEN product_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Product ID: ' || v_Product_id || ', Name: ' || v_Product_Name || ', Type: ' || v_Product_Type || ', Price: ' || v_Price);
    END LOOP;
    CLOSE product_cursor;
END;

-- 3. Explicit Cursor to Display Products with Price Greater Than 5000
DECLARE
    CURSOR high_price_cursor IS
        SELECT Product_id, Product_Name, Product_Type, Price
        FROM Products
        WHERE Price > 5000;
BEGIN
    OPEN high_price_cursor;
    LOOP
        FETCH high_price_cursor INTO v_Product_id, v_Product_Name, v_Product_Type, v_Price;
        EXIT WHEN high_price_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Product ID: ' || v_Product_id || ', Name: ' || v_Product_Name || ', Type: ' || v_Product_Type || ', Price: ' || v_Price);
    END LOOP;
    CLOSE high_price_cursor;
END;

-- 4. Implicit Cursor to Display Number of Records Affected by Update Operation
BEGIN
    -- Update all product prices by 1000
    UPDATE Products
    SET Price = Price + 1000;

    -- Display the number of records affected by the update
    DBMS_OUTPUT.PUT_LINE('Number of records updated: ' || SQL%ROWCOUNT);
END;
